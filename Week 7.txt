#Multichain work (included in mid)
commands

Locking script <Redeem script>
OP_DUP OP_HASH160<Bob"s Public Key Hash>
OP_EQUALVERIFY OP_CHECKSIG

Unlocking Script
<Bob's Signature><Bob's Public Key>

First unlock then lock
Works like a stack

hash of public key 
hash of signature
bob's public key
bob's sig
(See Slides)


Escrow transaction:
Image if two people have an agreement for a transaction but for some reason there is a conflict and no one is authorizing the transaction.
A third party service would resolve this conflict keeping the trust intact.

Script of Escrow <Locking script/Redeem script>
OP_2(Two signatures) <Alice_PublicKey>
<Bob_PublicKey>
<Charlie_PublicKey> OP_3(three signatures) (See if the locking script has three public keys)
OP_CHECKMULTISIG


Green Address Payment in Bitcoin
A green address is a bitcoin transactioin method where a trusted third party such as an exchange or wallet provider co-signs transactions,
allowing recipicants to accept them instantly, even before they are confirmed on the  blockchain.

Locking script-Funds locked in green address
OP_2 <Alice_PublicKey><Provider_PublicKey> OP_2 OP_CHECKMULTISIG

OP_2 requires 2 valid signatures to spend Bitcoin
<Alice_PublicKey>,<Provider_PublicKey> -> Two available public key.
OP_2 -> exactly two public keys are involbed
OP_CHECKMULTISIG -> Ensures both alice and green address signatures are verified via their hash to existing hash


Efficicent Micro-Payments
Prepaid phone services

multichain-cli chain12 getinfo (run multichaind chain12 )
{"method":"getinfo","params":[],"id":"34917752-1741423458","chain_name":"chain12"}

{
    "version" : "2.3.3",
    "nodeversion" : 20303901,
    "edition" : "Community",
    "protocolversion" : 20013,
    "chainname" : "chain12",
    "description" : "MultiChain chain12",
    "protocol" : "multichain",
    "port" : 2651,
    "setupblocks" : 60,
    "nodeaddress" : "chain12@172.27.64.1:2651",
    "burnaddress" : "1XXXXXXXGyXXXXXXBNXXXXXXegXXXXXXSW6wAR",
    "incomingpaused" : false,
    "miningpaused" : false,
    "offchainpaused" : false,
    "walletversion" : 60000,
    "balance" : 0,
    "walletdbversion" : 3,
    "reindex" : false,
    "blocks" : 6,
    "chainrewards" : 0,
    "streams" : 1,
    "timeoffset" : 0,
    "connections" : 0,
    "proxy" : "",
    "difficulty" : 5.96046447753906e-8,
    "testnet" : false,
    "keypoololdest" : 1741423400,
    "keypoolsize" : 2,
    "paytxfee" : 0,
    "relayfee" : 0,
    "errors" : ""
}
PS C:\Users\Monis\Desktop\MultiChaiin>

Multichain Task
This output is the result of the getinfo command from MultiChain, a private blockchain platform. MultiChain allows you to create and deploy permissioned blockchain networks.

Here's what the key fields in the response mean:

version: "2.3.3" → The version of MultiChain software running.
nodeversion: 20303901 → Internal version identifier of the node.
edition: "Community" → The edition of MultiChain (Community/Enterprise).
protocolversion: 20013 → The protocol version being used.
chainname: "chain12" → The name of the MultiChain blockchain network.
description: "MultiChain chain12" → A description of the blockchain.
protocol: "multichain" → Indicates that this is a MultiChain blockchain.
port: 2651 → The network port being used by this blockchain node.
setupblocks: 60 → The number of initial blocks configured during chain setup.
nodeaddress: "chain12@172.27.64.1:2651" → The address of the node.
burnaddress: "1XXXXXXXGyXXXXXXBNXXXXXXegXXXXXXSW6wAR" → The address where assets can be "burned" (removed from circulation).
incomingpaused: false → Indicates whether the node is currently pausing incoming transactions.
miningpaused: false → Indicates whether mining is paused.
offchainpaused: false → Indicates whether off-chain transactions are paused.
walletversion: 60000 → The version of the wallet software.
balance: 0 → The balance of the wallet associated with this node.
walletdbversion: 3 → The version of the wallet database.
reindex: false → Whether the node is currently reindexing the blockchain data.
blocks: 6 → The number of blocks currently stored on this node.
chainrewards: 0 → The total amount of rewards issued on this blockchain.
streams: 1 → The number of active data streams on the blockchain.
timeoffset: 0 → The time offset between this node and the network.
connections: 0 → The number of active connections to other nodes.
proxy: "" → No proxy is configured.
difficulty: 5.96046447753906e-8 → The mining difficulty level.
testnet: false → Indicates that this is not a testnet.
keypoololdest: 1741423400 → The timestamp of the oldest unused key in the keypool.
keypoolsize: 2 → The number of keys available in the keypool.
paytxfee: 0 → The transaction fee per kilobyte.
relayfee: 0 → The minimum fee required for transactions to be relayed.
errors: "" → No errors are reported.



Hard Forking & Soft Forking in MultiChain
1. Hard Forking in MultiChain
A hard fork is a major protocol upgrade that is not backward-compatible with older versions of the blockchain software. In MultiChain, a hard fork can occur when:

A rule change makes previously invalid blocks valid (or vice versa).
Nodes running an older version of the MultiChain software cannot communicate with upgraded nodes.
The blockchain permanently splits into two networks if some nodes do not upgrade.
Hard Fork Scenarios in MultiChain
Upgrading MultiChain Protocol: If a new MultiChain version introduces a breaking change in the consensus rules (e.g., a new transaction validation rule), older nodes will be unable to process new transactions or blocks.
Modifying Chain Parameters: Changes to certain chain parameters (like mining-diversity, max-block-size, or target-block-time) may require a coordinated upgrade of all nodes.
How to Perform a Hard Fork in MultiChain
Upgrade MultiChain Software: All nodes must upgrade to the new version.
Update Chain Parameters: If the hard fork involves changes to the blockchain rules, modify multichain.conf or use commands like setruntimeparam where applicable.
Restart All Nodes: After updating, restart all nodes to ensure they follow the new chain rules.
Ensure Consensus: If some nodes do not upgrade, they may continue on a separate chain, effectively forking the network.
2. Soft Forking in MultiChain
A soft fork is a backward-compatible update that introduces new rules but allows older nodes to still recognize new blocks as valid. Soft forks are often used for security patches, performance improvements, or feature enhancements.

Soft Fork Scenarios in MultiChain
New Validation Rules: Introducing a new transaction type or script that older nodes ignore but newer nodes enforce.
Tighter Restrictions: For example, reducing the block size limit or increasing mining diversity.
Permission Changes: Modifying permissions, such as restricting certain transaction types or asset creation.
How to Perform a Soft Fork in MultiChain
Upgrade Majority of Nodes: Ensure that most miners and validators update to enforce the new rules.
Gradual Adoption: Since older nodes can still recognize new blocks, the network remains functional.
Enable New Features: Once enough nodes upgrade, new features can be activated while maintaining backward compatibility.
Key Differences
Feature	Hard Fork	Soft Fork
Compatibility	Not backward-compatible	Backward-compatible
Node Upgrade Requirement	All nodes must upgrade	Only majority of nodes need to upgrade
Chain Split Risk	High (may lead to two separate chains)	Low (all nodes still accept blocks)
Use Cases	Major protocol changes, new consensus rules	Security updates, feature upgrades, transaction rule changes
Forking in MultiChain
Unlike public blockchains like Bitcoin and Ethereum, MultiChain is a permissioned blockchain, which means:

Forks are less common because all nodes are typically controlled by an organization or a group of known participants.
Changes are coordinated centrally, making it easier to manage upgrades without unintended forks.
Hard forks are rare, but soft forks (parameter updates, feature enhancements) are more common.



//listwallettransactions
 multichain-cli chain12 listwallettransactions
{"method":"listwallettransactions","params":[],"id":"63730277-1741423861","chain_name":"chain12"}

[
    {
        "balance" : {
            "amount" : 0, //need to add native currency
            "assets" : [ //You can add assets
            ]
        },
        "myaddresses" : [
            "1FWrb7S3rNQ78Wqhc15BacocG1vfheUKs4k416"
        ],
        "addresses" : [
        ],
        "permissions" : [
        ],
        "items" : [
        ],
        "data" : [
            "53504b62473045022100fe184425bacf0bb17d9ab76cf7be320552621c2d8bc28258b36fb411972e493302205a71461f0ea3e8ceec8f9184396b8a0afe93fdfb8cf8dad0f02b872169f3fa9d032103893de754fffec2146f32ddfc4d24028544640b98391a87e13d6770174d9d340a"
        ], //data created when genesis block is created
        "confirmations" : 33,
        "generated" : true,
        "blockhash" : "009a5bddc5b75067bd9eba337899782eef5b194a47e5684ff8d1dd0c3258202a",
        "blockheight" : 1,
        "blockindex" : 0,
        "blocktime" : 1741423401,
        "txid" : "9f58330468e73c1cf0564b2821691a0875f17c7ad3a5a5030aa35a740ffe4c75", //transaction id
        "valid" : true,
        "time" : 1741423401,
        "timereceived" : 1741423401
    }
]