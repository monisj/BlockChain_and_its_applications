Discussion of (Sort of a project) Block chain application alogside report
In Bitcoin (Limits one transaction per block)

1. Bitcoin scripting (stack-based, Forth-like programming language used in Bitcoin transactions to define spending conditions.)
2. Smart Contract (Smart contracts are self-executing contracts with the terms of the agreement directly written into code. 
They run on blockchain networks, ensuring transparency, security, and automation.)

Bitcoin scripting and smart contracts both enable programmability on blockchains, but they differ significantly in complexity and 
functionality. Bitcoin scripting is a simple, stack-based programming language designed to facilitate transaction validation. 
It is not Turing-complete, meaning it lacks the ability to perform loops or complex conditional logic. 
It primarily supports basic functions like multi-signature transactions, hashlocks, and timelocks, making it useful for
 security but not for building decentralized applications. Additionally, Bitcoin’s scripting follows a stateless model 
 based on the UTXO (Unspent Transaction Output) system, meaning transactions do not store or update state on the blockchain.

In contrast, smart contracts are fully programmable, Turing-complete, and capable of executing complex logic beyond simple transactions.
 They can store and modify data on the blockchain, making them stateful. Smart contracts are written in languages like Solidity (Ethereum),
  Rust (Solana), and Vyper, allowing developers to create decentralized applications (DApps) for financial services (DeFi), NFTs, 
  governance (DAOs), and more. However, their flexibility also introduces security risks like re-entrancy attacks and logic errors. 
  Unlike Bitcoin’s simple and linear scripting, smart contracts enable autonomous execution of predefined rules, making blockchain 
  ecosystems more interactive and programmable.

Merging Value where a wallet can record transactions from different entities. Its ledger would be different that a typical ledger.
Merging values in Bitcoin typically refers to combining multiple unspent transaction outputs (UTXOs) into a single transaction. This can happen in two main ways:

1. Standard UTXO Merging (Combining multiple inputs in a transaction)
2. CoinJoin (Privacy-focused merging of multiple users' inputs)


Joint Payment A joint payment (or multi-signature transaction) in Bitcoin allows multiple parties to control a single Bitcoin address. 
This is typically implemented using Pay-to-Script-Hash (P2SH) or Pay-to-MultiSig (P2MS) scripts.
Essentially two people have access to the same account.

OP_Code examples
OP_O || OP_FALSE  (Pushes an empty value (false) onto the stack)
OP_1 to OP_16 (Pushes number 1 to 16 onto the stack)
OP_DUP (Duplicates the top stack item)
OP_HASH160 (Hashes the top item using RIPEMD160(SHA256(x)))
OP_EQUAL (Checks if the top two items of the stack are equal)
OP_EQUALVERIFY (Same as OP_EQUAL but fails if false)
OP_CHECKSIG (Verifies a digital signature)

Vout = representing the address i a single entity is sending multiple transactions.
scriptsig = A scriptSig (unlocking script) is used in a Bitcoin transaction to
prove ownership and unlock the corresponding UTXO (Unspent
Transaction Output).

Mid Paper (Important)
30 marks

(15 marks) outside of MID
Create a group of 4 (I am doing solo so this rule is out)
See the paper in the classroom (Get literature review)
Get the problem statement to a smart city.
Write a report (7 pages)
Design an:
1. Abstract
2. Introduction
3. Motivation
4. Contributions (New framework) , can be many more
5. Literature review (2024,2025) upto 24 references

See the overleaf template
Before MID (AI Content and Plagerism should be < 10)

Should also provide example in code (MVP Concept and Evaluation (Cover CIA) Should the blockchain be visable).
Display proof of concept via MVP
Time: 2 Weeks


The rest of 15 marks are theoretical 
Chapter 1 and Chapter 2:
See all the lab assignments